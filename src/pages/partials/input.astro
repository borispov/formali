---
export const partial = true;
const { field } = Astro.props
const { error, question, description, type, placeholder, required } = field
---

<fieldset hx-swap="none" x-data="data" hx-target="this">
  <label 
    class="text-lg sm:text-xl xl:text-3xl font-medium text-gray-700 leading-[1.35em] lg:leading-normal">
    {question}
    <sup x-show="field.required" class="text-red-600"> * </sup>
  </label>

  <template x-if="field.description">
    <p 
      x-text="field.description" 
      class="text-lg font-normal leading-relaxed text-neutral-600" />
  </template>

  <input
    name={field.id}
    id={field.id}
    hx-post="/form"
    :type="field.type"
    :placeholder="field.placeholder"
    required={required}
    class={`
    [ question-input__text transition-all bg-transparent text-gray-800 ]
    [ border-b-2 border-b-neutral-600 mt-8 pb-2 ] 
    [ placeholder:italic placeholder:text-neutral-500 placeholder:text-xl lg:placeholder:text-3xl focus:border-b-neutral-100 outline-0 ]`}
    />
  <div id="input-error" class="error hidden mt-2 p-1 text-red-600 bg-yellow-200" />
</fieldset>

<style>
  .question-input__text {
    font-size: 2rem;
    width: 100%;
  }

  @media screen and (max-width: 599px) {
    .question-input__text {
      font-size: 2.9rem;
      margin-top: 32px;
    }
  }
</style>


<script is:inline define:vars={{ field: field }} >
  console.log(field)
  document.addEventListener('alpine:init', () => {
    Alpine.data('data', () => ({
      field: field,
    }))
  })
</script>
